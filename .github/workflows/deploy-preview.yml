name: Deploy preview on PR

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

defaults:
  run:
    shell: 'bash -Eeuo pipefail {0}'

jobs:
  preview:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install deps
        run: npm ci || npm install

      # Clean up old channels first to avoid hitting the quota before creating a new one.
      - name: Pre-cleanup old preview channels (avoid quota)
        run: |
          # Use latest CLI to ensure prune options/behavior are supported
          # Keep only the 5 most recent channels, delete the rest
          npx firebase-tools@latest hosting:channel:prune --project um-shotbuilder --max-channels 5 || true

      - name: Build
        env:
          VITE_FIREBASE_API_KEY:             ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN:         ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID:          ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET:      ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID:              ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID:      ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }} # optional
        run: npm run build

      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          # Generate short‑lived credentials via Workload Identity Federation.
          # Creates a credentials file and exports env so Firebase CLI can use ADC.
          workload_identity_provider: projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider
          service_account: github-actions-deploy@um-shotbuilder.iam.gserviceaccount.com
          # Align with provider's Allowed audiences; commonly set to your repo URL.
          audience: https://github.com/ted-design/shot-builder-app
          create_credentials_file: true
          export_environment_variables: true

      - name: Deploy preview channel
        env:
          # Ensure Hosting predeploy (npm run build) gets the same env vars during deploy.
          VITE_FIREBASE_API_KEY:             ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN:         ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID:          ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET:      ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID:              ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID:      ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }} # optional
        # Channel name uses PR number (stable across pushes)
        # Pipe through tee so CLI output still appears in the GitHub log when the command fails.
        run: |
          set -o pipefail
          npx firebase-tools@latest hosting:channel:deploy pr-${{ github.event.number }} \
            --project um-shotbuilder \
            --json \
            --non-interactive \
            | tee deploy.json

          # Validate that deploy.json contains valid JSON, not HTML or error output
          if head -1 deploy.json | grep -qi '<!DOCTYPE\|<html'; then
            echo "ERROR: Deploy command returned HTML instead of JSON. Full output:"
            cat deploy.json
            exit 1
          fi

          # Verify JSON is parseable and check for success status
          if ! node -e "JSON.parse(require('fs').readFileSync('deploy.json', 'utf8'))" 2>/dev/null; then
            echo "ERROR: Deploy command returned invalid JSON. Full output:"
            cat deploy.json
            exit 1
          fi

      - name: Output preview URL
        run: |
          set -e
          echo "---- firebase-tools deploy output ----"
          cat deploy.json || true
          echo "--------------------------------------"

          node - <<'NODE'
          const fs = require('fs');

          // load deploy output first (often includes URLs)
          let url = null;
          try {
            const d = JSON.parse(fs.readFileSync('deploy.json', 'utf8'));
            // Try common locations for the URL
            // Newer CLIs often place it at deploys[0].url or result[0].url
            const candidates = [];
            if (Array.isArray(d.deploys)) candidates.push(...d.deploys);
            if (Array.isArray(d.result))  candidates.push(...d.result);
            if (d && d.result && d.result.previewUrl) candidates.push({ url: d.result.previewUrl });
            const found = candidates.find(x => x && x.url);
            if (found && found.url) url = found.url;
          } catch (_) {}

          // Fallback to channel list if not found in deploy output
          if (!url) {
            try {
              const child = require('child_process');
              const listJson = child.execSync('npx firebase-tools hosting:channel:list --project um-shotbuilder --json', { stdio: ['ignore', 'pipe', 'inherit'] }).toString();
              const o = JSON.parse(listJson);
              const pr = 'pr-${{ github.event.number }}';

              const channels = Array.isArray(o.result) ? o.result
                               : Array.isArray(o.channels) ? o.channels
                               : [];

              const match = channels.find(x => {
                const name = x && (x.name || '');
                return typeof name === 'string' && name.endsWith('/' + pr);
              });

              if (match && match.url) url = match.url;
            } catch (e) {
              console.log('Failed to query channel list:', e.message);
            }
          }

          if (url) {
            console.log('Preview URL:', url);
            // also write to the GitHub Step Summary so it’s visible on the PR
            fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, `**Preview URL:** ${url}\n`);
          } else {
            console.log('Preview deployed, but URL not found in CLI JSON.');
          }
          NODE

      - name: Cleanup old preview channels
        if: always()
        run: |
          # Prune old preview channels to avoid hitting quota limits.
          # Keep only the 5 most recent channels, delete the rest.
          npx firebase-tools@latest hosting:channel:prune --project um-shotbuilder --max-channels 5 || true
