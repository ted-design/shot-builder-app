*** Begin Patch
*** Delete File: src/lib/firebase.js
*** End Patch

*** Begin Patch
*** Update File: src/firebase.js
@@
- import { initializeApp } from "firebase/app";
- import { getAuth, GoogleAuthProvider } from "firebase/auth";
- import { getFirestore } from "firebase/firestore";
- import {
-   getStorage,
-   ref as storageRef,
-   uploadBytes,
-   getDownloadURL,
-   deleteObject,
- } from "firebase/storage";
-
- // 1) Replace with your actual config from Firebase Console > Project Settings > General
- const firebaseConfig = {
-   apiKey: "REDACTED",
-   authDomain: "um-shotbuilder.firebaseapp.com",
-   projectId: "um-shotbuilder",
-   // IMPORTANT: this is the bucket NAME, not a URL
-   storageBucket: "um-shotbuilder.appspot.com",
-   messagingSenderId: "168065141847",
-   appId: "1:168065141847:web:be45c7303aa6f8aff4e712",
-   measurementId: "G-0M8WVWZ7PE",
- };
-
- // 2) Initialize SDKs
- const app = initializeApp(firebaseConfig);
-
- export const auth = getAuth(app);
- export const provider = new GoogleAuthProvider();
- // Optional nicety: always show account chooser
- provider.setCustomParameters({ prompt: "select_account" });
-
- export const db = getFirestore(app);
- export const storage = getStorage(app);
-
- // 3) Helpers for uploads/deletes
- // - folder: "products" | "talent" | "locations" | etc.
- // - id: Firestore doc id
- // Returns: { downloadURL, path } where path is a Storage path you can save on the doc
- export async function uploadImageFile(file, { folder, id, filename }) {
-   if (!file) throw new Error("No file provided");
-   const safeName =
-     filename || `${Date.now()}-${file.name.replace(/\s+/g, "_")}`;
-   const path = `images/${folder}/${id}/${safeName}`;
-   const ref = storageRef(storage, path);
-   await uploadBytes(ref, file, { contentType: file.type });
-   const downloadURL = await getDownloadURL(ref);
-   return { downloadURL, path };
- }
-
- // Delete by the Storage path you saved on the doc (e.g., "images/products/abc/file.jpg")
- export async function deleteImageByPath(path) {
-   if (!path) return;
-   const ref = storageRef(storage, path);
-   await deleteObject(ref);
- }
+ import { initializeApp } from "firebase/app";
+ import { getAuth, GoogleAuthProvider } from "firebase/auth";
+ import { getFirestore } from "firebase/firestore";
+ import { getStorage } from "firebase/storage";
+
+ // Utility to ensure required env variables are defined.
+ function required(name) {
+   const val = import.meta.env[name];
+   if (!val) {
+     throw new Error(`Missing ${name}. Add it to your .env or CI secrets.`);
+   }
+   return val;
+ }
+
+ // Firebase configuration is sourced from Vite environment variables.
+ const firebaseConfig = {
+   apiKey: required("VITE_FIREBASE_API_KEY"),
+   authDomain: required("VITE_FIREBASE_AUTH_DOMAIN"),
+   projectId: required("VITE_FIREBASE_PROJECT_ID"),
+   storageBucket: required("VITE_FIREBASE_STORAGE_BUCKET"),
+   messagingSenderId: required("VITE_FIREBASE_MESSAGING_SENDER_ID"),
+   appId: required("VITE_FIREBASE_APP_ID"),
+   // measurementId is optional (e.g. for Analytics).
+   measurementId: import.meta.env.VITE_FIREBASE_MEASUREMENT_ID,
+ };
+
+ // Initialize Firebase SDKs.
+ const app = initializeApp(firebaseConfig);
+
+ // Auth, provider and database/storage exports.
+ export const auth = getAuth(app);
+ export const provider = new GoogleAuthProvider();
+ provider.setCustomParameters({ prompt: "select_account" });
+
+ export const db = getFirestore(app);
+ export const storage = getStorage(app);
*** End Patch

*** Begin Patch
*** Add File: .env.example
+# Example environment variables for Firebase configuration.
+#
+# Copy this file to `.env` (which is ignored by git) and populate with values from
+# Firebase Console → Project Settings → General → Your Web App's SDK configuration.
+#
+# Never commit your real credentials to version control. Instead, use CI secrets to
+# supply these variables during `npm run build`.
+
+VITE_FIREBASE_API_KEY=
+VITE_FIREBASE_AUTH_DOMAIN=
+VITE_FIREBASE_PROJECT_ID=
+VITE_FIREBASE_STORAGE_BUCKET=
+VITE_FIREBASE_MESSAGING_SENDER_ID=
+VITE_FIREBASE_APP_ID=
+VITE_FIREBASE_MEASUREMENT_ID=
*** End Patch

*** Begin Patch
*** Update File: .github/workflows/deploy-live.yml
@@
-      - name: Build
-        run: npm run build
+      - name: Build
+        env:
+          VITE_FIREBASE_API_KEY:             ${{ secrets.VITE_FIREBASE_API_KEY }}
+          VITE_FIREBASE_AUTH_DOMAIN:         ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
+          VITE_FIREBASE_PROJECT_ID:          ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
+          VITE_FIREBASE_STORAGE_BUCKET:      ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
+          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
+          VITE_FIREBASE_APP_ID:              ${{ secrets.VITE_FIREBASE_APP_ID }}
+          VITE_FIREBASE_MEASUREMENT_ID:      ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
+        run: npm run build
*** End Patch

*** Begin Patch
*** Update File: .github/workflows/deploy-preview.yml
@@
-      - name: Build
-        run: npm run build
+      - name: Build
+        env:
+          VITE_FIREBASE_API_KEY:             ${{ secrets.VITE_FIREBASE_API_KEY }}
+          VITE_FIREBASE_AUTH_DOMAIN:         ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
+          VITE_FIREBASE_PROJECT_ID:          ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
+          VITE_FIREBASE_STORAGE_BUCKET:      ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
+          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
+          VITE_FIREBASE_APP_ID:              ${{ secrets.VITE_FIREBASE_APP_ID }}
+          VITE_FIREBASE_MEASUREMENT_ID:      ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
+        run: npm run build
*** End Patch
