rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthed() {
      return request.auth != null;
    }

    function userClient() {
      return request.auth != null
        ? (request.auth.token.clientId != null
            ? request.auth.token.clientId
            : request.auth.token.orgId)
        : null;
    }

    function clientMatches(pathClient) {
      let clientId = userClient();
      return clientId != null && clientId == pathClient;
    }

    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'admin';
    }

    function isProducer() {
      return request.auth != null &&
        (request.auth.token.role == 'producer' || request.auth.token.role == 'wardrobe');
    }

    function hasProjectRole(projectId, roles) {
      let clientId = userClient();
      return clientId != null &&
        request.auth != null &&
        exists(/databases/$(database)/documents/clients/$(clientId)/projects/$(projectId)/members/$(request.auth.uid)) &&
        roles.hasAny([
          get(/databases/$(database)/documents/clients/$(clientId)/projects/$(projectId)/members/$(request.auth.uid)).data.role
        ]);
    }

    match /talent/{docId} {
      allow read: if isAuthed();
      allow create, update, delete: if isAuthed();
    }

    match /locations/{docId} {
      allow read: if isAuthed();
      allow create, update, delete: if isAuthed();
    }

    match /shots/{docId} {
      allow read: if isAuthed();
      allow create, update, delete: if isAuthed();
    }

    match /clients/{clientId}/{document=**} {
      allow read: if clientMatches(clientId);
    }

    match /clients/{clientId}/products/{productId} {
      allow read: if clientMatches(clientId);
      allow create, delete: if clientMatches(clientId) && isAdmin();
      allow update: if clientMatches(clientId) &&
        (isAdmin() || request.auth.token.role == 'wardrobe');
    }

    match /clients/{clientId}/productFamilies/{familyId} {
      allow read: if clientMatches(clientId);
      allow create, update: if clientMatches(clientId) && (isAdmin() || isProducer());
      allow delete: if clientMatches(clientId) && isAdmin();

      match /skus/{skuId} {
        allow read: if clientMatches(clientId);
        allow create, update: if clientMatches(clientId) && (isAdmin() || isProducer());
        allow delete: if clientMatches(clientId) && isAdmin();
      }
    }

    match /clients/{clientId}/projects/{projectId} {
      allow read: if clientMatches(clientId) &&
        (isAdmin() || hasProjectRole(projectId, ['producer', 'wardrobe', 'viewer']));
      allow create: if clientMatches(clientId) && (isAdmin() || isProducer());
      allow update, delete: if clientMatches(clientId) &&
        (isAdmin() || hasProjectRole(projectId, ['producer', 'wardrobe']));

      match /{collectionId}/{docId} {
        allow read: if clientMatches(clientId) &&
          (isAdmin() || hasProjectRole(projectId, ['producer', 'wardrobe', 'viewer']));
        allow create, update, delete: if clientMatches(clientId) &&
          (isAdmin() || hasProjectRole(projectId, ['producer', 'wardrobe']));
      }
    }
  }
}
